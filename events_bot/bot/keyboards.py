from asgiref.sync import sync_to_async
from events_bot.models import CustomUser
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
import sys
import django
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(BASE_DIR))

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meetup.settings')
django.setup()


def start_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(
        text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        callback_data='show_events'
    )
    return builder.as_markup()


async def main_keyboard(user_id):
    builder = InlineKeyboardBuilder()
    user = await sync_to_async(CustomUser.objects.get)(telegram_id=user_id)

    builder.button(
        text='‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–æ–∫–ª–∞–¥—á–∏–∫—É',
        callback_data='ask_speaker'
    )

    builder.button(
        text='üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        callback_data='show_schedule'
    )

    builder.button(
        text='üí¨ –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏',
        callback_data='connect_devs'
    )

    builder.button(
        text='üíµ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤',
        callback_data='donate'
    )

    if user.role == 'speaker':
        builder.button(
            text='–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã',
            callback_data='show_my_questions'
        )

    if not user.notifications:
        builder.button(
            text='üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            callback_data='subscribe_notifications'
        )

    if user.role == 'organizer':
        builder.button(
            text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            callback_data='send_notifications'
        )

    if user.role == 'listener':
        builder.button(
            text='üé§ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–ø–∏–∫–µ—Ä–∞',
            callback_data='apply_for_speaker'
        )

    builder.adjust(1)
    return builder.as_markup()


def show_speakers(speakers):
    builder = InlineKeyboardBuilder()
    for speaker in speakers:
        presentations = speaker.presentation_set.all()

        speaker_name = f'{speaker.first_name} {speaker.last_name}'

        if presentations:
            topics = ", ".join([p.topic for p in presentations])
            button_text = f'{speaker_name} ({topics})'
        else:
            button_text = f'{speaker_name} (–Ω–µ—Ç —Ç–µ–º)'

        if speaker.is_active:
            button_text += ' ‚úÖ'
        else:
            button_text += ' ‚ùå'

        builder.button(
            text=button_text,
            callback_data=f'speaker_{speaker.id}'
        )
    builder.adjust(1)
    return builder.as_markup()


def profiles_keyboard(page: int, total_pages: int):
    builder = InlineKeyboardBuilder()

    if page == 0 and total_pages > 1:
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data=f"next_page_{page+1}")

    elif page == total_pages - 1 and total_pages > 1:
        builder.button(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page-1}")

    elif 0 < page < total_pages - 1:
        builder.button(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"prev_page_{page-1}")
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data=f"next_page_{page+1}")

    else:
        return None

    builder.adjust(2)
    return builder.as_markup()


def questions_keyboard(current_index: int, total_questions: int,
                       question_id: int, is_answered: bool, asker_id: str):
    builder = InlineKeyboardBuilder()

    if total_questions > 1:
        if current_index > 0:
            builder.button(
                text="‚Üê –ù–∞–∑–∞–¥", 
                callback_data=f"prev_question_{current_index-1}"
            )

        if current_index < total_questions - 1:
            builder.button(
                text="–í–ø–µ—Ä–µ–¥ ‚Üí",
                callback_data=f"next_question_{current_index+1}"
            )

    if not is_answered:
        builder.button(
            text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
            callback_data=f"answer_question_{question_id}_{asker_id}"
        )
        builder.button(
            text="‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π",
            callback_data=f"mark_answered_{question_id}"
        )

    builder.adjust(2, 2)
    return builder.as_markup()


def answer_question_keyboard(asker_id):
    builder = InlineKeyboardBuilder()

    builder.button(
        text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç", 
        url=f"tg://user?id={asker_id}"
    )

    return builder.as_markup()


def notifications_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –î–∞', callback_data='confirm_subscription')
    builder.button(text='‚ùå –ù–µ—Ç', callback_data='cancel_subscription')
    builder.adjust(2)

    return builder.as_markup()


def back_to_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    return builder.as_markup()
